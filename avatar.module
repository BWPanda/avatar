<?php
/**
 * @file
 * Automatically generate unique avatars for user accounts.
 */

/**
 * Implements hook_config_info().
 */
function avatar_config_info() {
  return array(
    'avatar.settings' => array(
      'label' => t('Avatar settings'),
      'group' => t('Configuration'),
    ),
  );
}

/**
 * Return a list of avatar types and the settings they support.
 */
function avatar_types() {
  return array(
    'initials' => array(
      'name' => t('Initials'),
      'description' => t("Works best with the 'Username' data source."),
      'url' => 'https://ui-avatars.com/',
      'settings' => array('initials_rounded', 'initials_bg'),
    ),
    'multicultural' => array(
      'name' => t('Multicultural'),
      'url' => 'https://multiavatar.com/',
      'settings' => array(),
    ),
    'identicon' => array(
      'name' => t('Identicon'),
      'url' => 'https://jdenticon.com/',
//       'settings' => array('identicon_config'),
      'settings' => array(),
    ),
    'robots' => array(
      'name' => t('Robots'),
      'url' => 'https://robohash.org/',
      'settings' => array('robots_set', 'robots_bg'),
    ),
    'minimal' => array(
      'name' => t('Minimal'),
      'url' => 'https://minimalavatars.com/',
      'settings' => array(),
    ),
    'minecraft' => array(
      'name' => t('Minecraft'),
      'url' => 'https://minotar.net/',
      'settings' => array('minecraft_type'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function avatar_menu() {
  return array(
    'admin/config/people/avatar' => array(
      'title' => 'Avatar settings',
      'description' => 'Configure auto-generated user avatars.',
      'page callback' => 'backdrop_get_form',
      'page arguments' => array('avatar_settings_form'),
      'access arguments' => array('administer account settings'),
    ),
  );
}

/**
 * Page callback: Constructs a form for configuring user avatars.
 *
 * @see avatar_menu()
 */
function avatar_settings_form($form, &$form_state) {
  $config = config('avatar.settings');
  $form['#config'] = 'avatar.settings';

  // Setup the options and descriptions for avatar types.
  $options = $option_descriptions = $states = array();
  foreach (avatar_types() as $type => $details) {
    $options[$type] = $details['name'];

    $description = isset($details['description']) ? $details['description'] . '<br>' : '';
    $link = l($details['url'], $details['url'], array('attributes' => array('target' => '_blank')));
    $option_descriptions[$type]['#description'] = $description . $link;

    if (empty($details['settings'])) {
      $states['options']['invisible'][] = array(':input[name="type"]' => array('value' => $type));
    }
    else {
      foreach ($details['settings'] as $setting) {
        $states[$setting]['visible'][] = array(':input[name="type"]' => array('value' => $type));
      }
    }
  }

  $form['type'] = array(
    '#type' => 'radios',
    '#title' => t('Type'),
    '#options' => $options,
    '#default_value' => $config->get('type'),
  );
  $form['type'] += $option_descriptions;

  $form['data_source'] = array(
    '#type' => 'radios',
    '#title' => t('Data source'),
    '#description' => t("Which user information to use for generating avatars. This will determine if/when avatars are re-generated, and if it's possible for users to trigger the generation of a new avatar for themselves."),
    '#options' => array(
      'username' => t('Username'),
      'email' => t('Email address'),
      'uid' => t('User ID'),
    ),
    '#default_value' => $config->get('data_source'),
  );
  $form['data_source']['username']['#description'] = t("Avatars will be re-generated whenever a user's username is updated (case-sensitive).");
  $form['data_source']['email']['#description'] = t("Avatars will be re-generated whenever a user's email address is updated (not case-sentitive).");
  $form['data_source']['uid']['#description'] = t("Avatars will never be re-generated (since a user's ID never changes).");

  $form['options'] = array(
    '#type' => 'details',
    '#summary' => t('Options'),
    '#open' => TRUE,
    '#states' => $states['options'],
  );

  $form['options']['initials_rounded'] = array(
    '#type' => 'checkbox',
    '#title' => 'Rounded',
    '#default_value' => $config->get('initials_rounded'),
    '#states' => $states['initials_rounded'],
  );

  $form['options']['initials_bg'] = array(
    '#type' => 'select',
    '#title' => 'Background',
    '#options' => array(
      'random' => t('Random'),
      'color' => t('Colour'),
    ),
    '#default_value' => $config->get('initials_bg'),
    '#states' => $states['initials_bg'],
  );
  $form['options']['initials_bg_color'] = array(
    '#type' => 'color',
    '#description' => t('The foreground (either white or black) will be determined automatically based on the colour selected here.'),
    '#default_value' => $config->get('initials_bg_color'),
    '#states' => array_merge_recursive($states['initials_bg'], array(
      'visible' => array(
        ':input[name="initials_bg"]' => array('value' => 'color'),
      ),
    )),
  );

//   // Needs https://github.com/aarohmankad/identicon-api/issues/4 fixed to work.
//   $form['options']['identicon_config'] = array(
//     '#type' => 'textfield',
//     '#title' => 'Design config',
//     '#description' => t('Customise the design using the <a href="@designer" target="_blank">Icon designer</a>, then paste the generated config value here.', array(
//       '@designer' => 'https://jdenticon.com/icon-designer.html',
//     )),
//     '#default_value' => $config->get('identicon_config'),
//     '#states' => $states['identicon_config'],
//   );

  $form['options']['robots_set'] = array(
    '#type' => 'select',
    '#title' => t('Group'),
    '#options' => array(
      'set1' => t('Robots'),
      'set2' => t('Monsters'),
      'set3' => t('Robot heads'),
      'set4' => t('Kittens'),
//       // set5 is problematic: https://github.com/e1ven/Robohash/issues/37
//       'set5' => t('Humans'),
    ),
    '#default_value' => $config->get('robots_set'),
    '#states' => $states['robots_set'],
  );

  $form['options']['robots_bg'] = array(
    '#type' => 'select',
    '#title' => t('Background'),
    '#options' => array(
      'bg0' => t('Transparent'),
      'bg1' => t('Locations'),
      'bg2' => t('Abstract'),
    ),
    '#default_value' => $config->get('robots_bg'),
    '#states' => $states['robots_bg'],
  );

  $form['options']['minecraft_type'] = array(
    '#type' => 'select',
    '#title' => t('Group'),
    '#options' => array(
      'avatar' => t('Regular'),
      'helm' => t('Helmets'),
      'cube' => t('3D heads'),
      'bust' => t('Busts'),
    ),
    '#default_value' => $config->get('minecraft_type'),
    '#states' => $states['minecraft_type'],
  );

  // As much as I'd like to just use system_settings_form() here, I need to
  // customise the order in which the submit functions are called...
  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Save configuration'),
    ),
  );
  if (!empty($_POST) && form_get_errors()) {
    backdrop_set_message(t('The settings have not been saved because of the errors.'), 'error');
  }
  $form['#submit'] = array('system_settings_form_submit', 'avatar_settings_form_submit');
  $form['#theme'] = 'system_settings_form';

  return $form;
}

/**
 * Form submission handler for avatar_settings_form().
 */
function avatar_settings_form_submit($form, &$form_state) {
  // Bulk regenerate user avatars.
  avatar_bulk_generate();
}

/**
 * Implements hook_form_FORM_ID_alter for user_admin_settings.
 */
function avatar_form_user_admin_settings_alter(&$form, &$form_state, $form_id) {
  $config = config('avatar.settings');

  // Add radio buttons for selecting avatar or uploaded pictures.
  $form['personalization']['picture_type'] = array(
    '#type' => 'radios',
    '#title' => t('Picture type'),
    '#options' => array(
      'upload' => t('Upload (manual)'),
      'avatar' => t('Avatar (automatic)'),
      'fallback' => t('Upload, with avatar fallback'),
    ),
    '#default_value' => $config->get('picture_type'),
    '#weight' => 1,
    '#states' => array(
      'invisible' => array(
        ':input[name="user_pictures"]' => array('checked' => FALSE),
      ),
    ),
    '#config' => 'avatar.settings',
  );
  $form['personalization']['picture_type']['upload']['#description'] = t('Let users manually upload their own pictures.');
  $form['personalization']['picture_type']['avatar']['#description'] = t('Automatically generate avatars for users. See the <a href="@settings">Avatar settings</a> for configuration.', array('@settings' => url('admin/config/people/avatar')));
  $form['personalization']['picture_type']['fallback']['#description'] = t("Avatars are generated for users who haven't uploaded a picture.");

  // Customise the default form.
  $form['personalization']['pictures']['#weight'] = 2;
  $form['personalization']['pictures']['user_picture_default']['#states'] = array(
    'visible' => array(
      ':input[name="picture_type"]' => array('value' => 'upload'),
    ),
  );
  $invisible = array(
    'invisible' => array(
      ':input[name="picture_type"]' => array('value' => 'avatar'),
    ),
  );
  $form['personalization']['pictures']['user_picture_dimensions']['#states'] = $invisible;
  $form['personalization']['pictures']['user_picture_file_size']['#states'] = $invisible;
  $form['personalization']['pictures']['user_picture_guidelines']['#states'] = $invisible;

  // Add a custom submit handler.
  $form['#submit'][] = 'avatar_user_admin_settings_submit';
}

/**
 * Form submission handler for user_admin_settings().
 */
function avatar_user_admin_settings_submit($form, &$form_state) {
  $original_value = $form['personalization']['picture_type']['#default_value'];
  $new_value = $form_state['values']['picture_type'];

  // Bulk regenerate user avatars.
  if ($new_value != 'upload' && $new_value != $original_value) {
    avatar_bulk_generate();
  }
}

/**
 * Bulk generate user avatars.
 */
function avatar_bulk_generate() {
  // Get all users except anonymous.
  $users = entity_load_multiple('user');
  unset($users[0]);

  // Save each user account to trigger avatar regeneration.
  foreach ($users as $user) {
    $user->avatar_regenerate = TRUE;
    $user->save();
  }
}

/**
 * Implements hook_form_FORM_ID_alter for user_profile_form.
 */
function avatar_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  // Hide the picture form element(s).
  if (config_get('avatar.settings', 'picture_type') == 'avatar') {
    unset($form['picture']);
  }
}

/**
 * Implements hook_user_presave().
 */
function avatar_user_presave($account) {
  $config = config('avatar.settings');
  $picture_type = $config->get('picture_type');

  // Skip if we're not using avatars.
  if (!config_get('system.core', 'user_pictures') || $picture_type == 'upload') {
    return;
  }
  // Skip if using the 'fallback' method and there's an existing picture.
  if ($picture_type == 'fallback' && !empty($account->picture)) {
    return;
  }

  // Check if a new avatar is needed.
  $generate = FALSE;
  $data_source = $config->get('data_source');
  // Always generate avatar if there's no existing picture.
  if (empty($account->picture)) {
    $generate = TRUE;
  }
  elseif ($picture_type == 'avatar') {
    // Generate avatar if doing a bulk update.
    if (!empty($account->avatar_regenerate)) {
      $generate = TRUE;
    }
    // Generate avatar if the username changes.
    elseif ($data_source == 'username' && trim($account->name) != trim($account->original->name)) {
      $generate = TRUE;
    }
    // Generate avatar if the email address changes.
    elseif ($data_source == 'email' && trim(backdrop_strtolower($account->mail)) != trim(backdrop_strtolower($account->original->mail))) {
      $generate = TRUE;
    }
  }

  // Generate an avatar.
  if ($generate) {
    $file = avatar_generate($account);

    if (isset($file->fid)) {
      $account->picture = $file->fid;
      unset($account->avatar_regenerate);
    }
  }
}

/**
 * Generate an avatar for a user.
 */
function avatar_generate($user) {
  $config = config('avatar.settings');

  // Get the string to use for the generation.
  switch ($config->get('data_source')) {
    case 'email':
      $string = trim(backdrop_strtolower($user->mail));
      break;
    case 'uid':
      $string = $user->uid;
      break;
    default:
      $string = trim($user->name);
  }

  // Generate the avatar URL.
  $size = 256;
  $format = 'png';
  switch ($config->get('type')) {
    case 'initials':
      $rounded = $config->get('initials_rounded') ? 'true' : 'false';

      $background = 'random';
      $foreground = 'ffffff';
      if ($config->get('initials_bg') == 'color') {
        $background = str_replace('#', '', $config->get('initials_bg_color'));
        $foreground = avatar_get_fg_color($background);
      }

      $url = "https://ui-avatars.com/api/?name=$string&size=$size&rounded=$rounded&background=$background&color=$foreground&format=$format";
      break;

    case 'multicultural':
      $url = "https://api.multiavatar.com/$string.$format";
      break;

    case 'identicon':
      $config = $config->get('identicon_config');

      $url = "https://identicon-api.herokuapp.com/$string/$size?config=$config&format=$format";
      break;

    case 'robots':
      $size = $size . 'x' . $size;
      $set = $config->get('robots_set');
      $bg = $config->get('robots_bg');

      $url = "https://robohash.org/$string.$format?size=$size&set=$set&bgset=$bg";
      break;

    case 'minimal':
      $url = "https://api.minimalavatars.com/avatar/$string/png";
      break;

    case 'minecraft':
      $type = $config->get('minecraft_type');

      $url = "https://minotar.net/$type/$string/$size.$format";
      break;

    default:
      return;
  }

  // Download and save the file.
  if (isset($url)) {
    $data = file_get_contents($url);

    if ($data !== FALSE) {
      $destination = file_default_scheme() . '://' . config_get('system.core', 'user_picture_path') . '/avatar-' . $user->uid . '.png';
      return file_save_data($data, $destination, FILE_EXISTS_REPLACE);
    }
  }
}

/**
 * Get the appropriate foreground colour based on the given background colour.
 *
 * @see https://github.com/LasseRafn/ui-avatars/issues/2#issuecomment-337170078
 * @see https://stackoverflow.com/a/3943023/4168619
 */
function avatar_get_fg_color($bg_color) {
  $fg_color = 'ffffff';

  $rgb = array(
    'red' => base_convert(substr($bg_color, 0, 2), 16, 10),
    'green' => base_convert(substr($bg_color, 2, 2), 16, 10),
    'blue' => base_convert(substr($bg_color, 4, 2), 16, 10)
  );
  $intensity = ($rgb['red'] * 0.299) + ($rgb['green'] * 0.587) + ($rgb['blue'] * 0.114);

  if ($intensity > 149) {
    $fg_color = '000000';
  }

  return $fg_color;
}

/**
 * Implements hook_block_info().
 */
function avatar_block_info() {
  return array(
    'attribution' => array(
      'info' => t('Avatar attribution'),
      'description' => t('Display a link to the website that generates the avatars currently in-use.'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function avatar_block_view($delta = '', $settings = array(), $contexts = array()) {
  $block = array();

  if ($delta == 'attribution') {
    $block['subject'] = $block['content'] = NULL;

    $config = config('avatar.settings');
    if (config_get('system.core', 'user_pictures') && $config->get('picture_type') != 'upload') {
      $avatar_types = avatar_types();
      $url = $avatar_types[$config->get('type')]['url'];

      $block['content'] = t('Auto-generated avatars by <a href="@url" target="_blank">@url</a>', array(
        '@url' => $url,
      ));
    }
  }

  return $block;
}
